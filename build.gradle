
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'io.spring.gradle', name: 'dependency-management-plugin', version: '1.0.1.RELEASE'
        //classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.4.RELEASE")
        classpath group: 'pl.allegro.tech.build', name: 'axion-release-plugin', version: '1.5.0'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'maven-publish'

apply plugin: 'io.spring.dependency-management'
apply plugin: 'pl.allegro.tech.build.axion-release'
//apply plugin: 'spring-boot'


sourceCompatibility = 1.7

scmVersion {
    localOnly = false
    sanitizeVersion = true
    def verPattern = ~/[0-9]+\.[0-9]+.[0-9]+/

    tag {
        prefix = 'release-'
        serialize = {config, version -> prefix + version}
        deserialize = {config, position, tagName -> tagName.replaceFirst(~"^${prefix}", "")}
    }

    def branchVersion = { version, branch ->
        String ver = branch.replaceFirst(/^\w+\//, "")
        if(!(ver ==~ verPattern)) {
            ver = version
        }
        return ver
    }
    branchVersionCreator = [
            'feature/.*|develop': { version, position  -> "${version}-${position.branch}"},
            '(hotfix|release)/.*':  { version, position -> branchVersion(version, position.branch)}
    ]

    def positionVersion = { version, branch ->
        def ver = null
        String verStr = branch.replaceFirst(/^\w+\//, "")
        if(verStr ==~ verPattern) {
            ver = version.valueOf(verStr)
            if(!version.lessThan(ver))
                ver = null
        }
        if(ver == null)
            switch(branch) {
                case 'hotfix/.*':
                    ver = version.incrementPatchVersion()
                    break
                case 'release/.*':
                    ver = version.incrementMinorVersion()
                    break
                default:
                    ver = version.incrementPatchVersion()
                    break
            }
        return ver;
    }

    branchVersionIncrementer = [
        'feature/.*|develop' : 'incrementMinor',
        '(hotfix|release)/.*' : { c ->
                positionVersion(c.currentVersion, c.scmPosition.branch)}
    ]
}


project.version = scmVersion.version
project.group = 'io.itfun'

project.setBuildDir "target/build"
idea.module {
    inheritOutputDirs = false
    outputDir = file('target/build-idea/classes/main')
    testOutputDir = file('target/build-idea/classes/test')
}



ext {
    springVer = '4.3.7.RELEASE'
    bootVer = '1.5.2.RELEASE'
}

sourceSets {
    main {
    }
    test {
        resources {
        }
    }
}

repositories {
    maven { url nexusUrl }
    ivy {
        url nexusUrl
        layout "pattern", {
            m2compatible = true
            artifact "[organisation]/[module]/[revision]/[artifact].[ext]"
            ivy "[organisation]/[module]/[revision]/ivy.xml"
        }
    }

    mavenCentral()
}

dependencies {
    compileOnly "org.projectlombok:lombok:1.16.2"
    testCompileOnly "org.projectlombok:lombok:1.16.2"
    compile 'org.slf4j:slf4j-api:1.7.21'

    compileOnly (group: 'org.springframework', name: 'spring-core', version: project.springVer)
    compileOnly( "org.springframework.boot:spring-boot:${bootVer}")

    testCompile group: 'org.springframework', name: 'spring-core', version: project.springVer
    testCompile( group: 'org.springframework.boot', name: 'spring-boot-starter', version: bootVer) {
            exclude module:"spring-boot-starter-logging"
    }
    testCompile "org.springframework.boot:spring-boot-starter-log4j2:${bootVer}"
    testCompile ('org.jboss.logging:jboss-logging:3.+') {
        exclude(group: 'log4j', module: 'log4j')
    }


    testCompile 'com.sun.mail:javax.mail:1.5.5'

    testCompile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.7.5'
    testCompile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.5'


    testCompile group: 'junit', name: 'junit', version: '4.12'
}

/*
bootRun {
    if ( project.hasProperty("args") ) {
        args project.args.tokenize(" ")
    }

    if ( project.hasProperty('jvmArgs') ) {
        jvmArgs project.jvmArgs.tokenize(" ")
    }
}
*/
/*
jar {
    baseName = 'gs-batch-processing'
}
*/


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
    //source configurations.doc.collect { zipTree(it) }
    include '**/*.java'
    include '**/*.groovy'
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: [javadoc, groovydoc]) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    from groovydoc.destinationDir
}


artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId 'spring-randomport'
            from components.java
            artifact sourcesJar
            artifact javadocJar

        }
    }
    repositories {
        maven {
            credentials {
                username nexusUser
                password nexusPassword
            }
            if(project.version.endsWith("-SNAPSHOT"))
                url nexusUrl.replace("groups/public", "repositories/snapshots")
            else
                url nexusUrl.replace("groups/public", "repositories/releases")

        }
    }
}
