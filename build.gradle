
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'io.spring.gradle', name: 'dependency-management-plugin', version: '1.0.1.RELEASE'
        //classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.4.RELEASE")
        classpath group: 'pl.allegro.tech.build', name: 'axion-release-plugin', version: '1.5.0'
    }
}
//plugins {  id "com.dorongold.task-tree" version "1.3" }

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

apply plugin: 'io.spring.dependency-management'
apply plugin: 'pl.allegro.tech.build.axion-release'
//apply plugin: 'spring-boot'


sourceCompatibility = 1.7

scmVersion {
    localOnly = false
    sanitizeVersion = true
    def verPattern = ~/[0-9]+\.[0-9]+.[0-9]+/

    tag {
        prefix = 'release-'
        serialize = {config, version -> prefix + version}
        deserialize = {config, position, tagName -> tagName.replaceFirst(~"^${prefix}", "")}
    }

    def branchVersion = { version, branch ->
        String ver = branch.replaceFirst(/^\w+\//, "")
        if(!(ver ==~ verPattern)) {
            ver = version
        }
        return ver
    }
    branchVersionCreator = [
            'feature/.*|develop': { version, position  -> "${version}-${position.branch}"},
            '(hotfix|release)/.*':  { version, position -> branchVersion(version, position.branch)}
    ]

    def positionVersion = { version, branch ->
        def ver = null
        String verStr = branch.replaceFirst(/^\w+\//, "")
        if(verStr ==~ verPattern) {
            ver = version.valueOf(verStr)
            if(!version.lessThan(ver))
                ver = null
        }
        if(ver == null)
            switch(branch) {
                case 'hotfix/.*':
                    ver = version.incrementPatchVersion()
                    break
                case 'release/.*':
                    ver = version.incrementMinorVersion()
                    break
                default:
                    ver = version.incrementPatchVersion()
                    break
            }
        return ver;
    }

    branchVersionIncrementer = [
        'feature/.*|develop' : 'incrementMinor',
        '(hotfix|release)/.*' : { c ->
                positionVersion(c.currentVersion, c.scmPosition.branch)}
    ]
}


project.version = scmVersion.version
project.group = 'io.github.vlad-mk'

project.setBuildDir "target/build"
idea.module {
    inheritOutputDirs = false
    outputDir = file('target/build-idea/classes/main')
    testOutputDir = file('target/build-idea/classes/test')
}



ext {
    springVer = '4.3.7.RELEASE'
    bootVer = '1.5.2.RELEASE'

    //dummy credentials
    if(!project.hasProperty('ossrhUsername'))
        ossrhUsername = ""
    if(!project.hasProperty('ossrhPassword'))
	    ossrhPassword = ""
/*
    if(!project.hasProperty('signing.keyId'))
        ext.'signing.keyId' = ''
    if(!project.hasProperty('signing.secretKeyRingFile'))
        ext.'signing.secretKeyRingFile' = ''
    ext."signing.password" = ''
*/
}

sourceSets {
    main {
    }
    test {
        resources {
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly "org.projectlombok:lombok:1.16.2"
    testCompileOnly "org.projectlombok:lombok:1.16.2"
    compile 'org.slf4j:slf4j-api:1.7.21'

//    compileOnly (group: 'org.springframework', name: 'spring-core', version: project.springVer)
//    compileOnly (group: 'org.springframework', name: 'spring-context', version: project.springVer)
    compileOnly( "org.springframework.boot:spring-boot:${bootVer}")

//    testCompile group: 'org.springframework', name: 'spring-core', version: project.springVer
//    testCompile group: 'org.springframework', name: 'spring-context', version: project.springVer
    testCompile( group: 'org.springframework.boot', name: 'spring-boot-starter', version: bootVer) {
            exclude module:"spring-boot-starter-logging"
    }
    testCompile "org.springframework.boot:spring-boot-starter-log4j2:${bootVer}"
    testCompile "org.springframework.boot:spring-boot-test:${bootVer}"
    testCompile "org.springframework:spring-test:${springVer}"
    testCompile "org.cthul:cthul-matchers:1.1.0"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

test {
    testLogging {
        //showStandardStreams = true
        events "passed", "skipped", "failed"
        debug {
            events "started", "skipped", "failed"
            exceptionFormat "full"
            showStackTraces = true
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
    include '**/*.java'
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: [javadoc, groovydoc]) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

/*
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId 'spring-randomport'
            from components.java
            artifact sourcesJar
            artifact javadocJar

        }
    }
}
*/

import org.gradle.plugins.signing.Sign

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        java.io.Console console = System.console()
        if(console != null) {
            console.printf "\n\nWe have to sign artifacts.\n"

            def password = console.readPassword("PGP Private Key Password: ")
            allprojects { ext."signing.password" = password }
            console.printf "\nThanks.\n\n"
        } else
            logger.info("No console available")
    }
}

uploadArchives {
  dependsOn build, signArchives

  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
        if( System.getProperty("https.proxyHost") != null)
          proxy(host:  System.getProperty("https.proxyHost"), port:  System.getProperty("https.proxyPort") as Integer, type: 'http')
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
        if( System.getProperty("https.proxyHost") != null)
          proxy(host:  System.getProperty("https.proxyHost"), port:  System.getProperty("https.proxyPort") as Integer, type: 'http')
      }

      pom.project {
        name 'spring-randomport'
        packaging 'jar'
        // optionally artifactId can be defined here 
        description 'spring RandomPort property source'
        url 'https://github.com/vlad-mk/spring-randomport'

        scm {
          connection 'scm:git:https://github.com/vlad-mk/spring-randomport'
          developerConnection 'scm:git:https://github.com/vlad-mk/spring-randomport'
          url 'https://github.com/vlad-mk/spring-randomport'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'vlad-mk'
            name 'Vlad Mikerin'
            email 'vladislav.mk@gmail.com'
          }
        }
      }
    }
  }
}

